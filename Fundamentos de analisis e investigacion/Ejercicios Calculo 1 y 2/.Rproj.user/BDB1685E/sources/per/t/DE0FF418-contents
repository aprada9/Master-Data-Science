library(mosaicCalc)
library(mosaic)

#Calculo de la derivada x^2 y evaluacion en distintos puntos
g=mosaicCalc::D(x^2~x)    
g

g(1/2)
g(0)
g(-1)

plotFun(g, x.lim=range(0,10)) #dibuja el grafico incluyendo rango


H=makeFun(2*x^2-5*x+2 ~x)#Calculo de la derivada y evaluación
H
H(1)
H(4)

plotFun(H(x)~x, x.lim=range(-5,5))

j=mosaicCalc::D(x^3-x ~x)
j
j(1)
j(4)

plotFun(j(x)~x, x.lim=range(-5,5))

A=symbolicD((x^3-x)~x)
A
B=symbolicD(x^4~x)
B


j=mosaicCalc::D(x^3-x ~x) #Primera derivada
j
dj=mosaicCalc::D(j(x)~x) #Segunda derivada
dj


### Funciones de varias variables

l=mosaicCalc::D(4 * x^2 * sin(y) ~x)
l
n=mosaicCalc::D(4*x^2 * sin(y)~y)
n

dl=mosaicCalc::D(4 * x^2 * sin(y) ~x + x)  #Segundas derivadas
dl

dn= mosaicCalc::D(4 * x^2 * sin(y) ~y+y)
dn

dln=mosaicCalc::D(4 * x^2 * sin(y) ~x+y)
dln
#Derivada del producto Pag.20
b=mosaicCalc::D((x^3-x)*(5*x^4+x^2)~x)
b

#Derivada del cociente
e=mosaicCalc::D(1/(x-2) ~x)
e

#Algunos ejemplos pag.24
k=mosaicCalc::D((x^3+x^2)^50 ~x)
k


L=mosaicCalc::D(((x-1)/(x+3))^(1/3) ~x)
L


####### Optimización

library(nloptr)

f=function(x) x*sin(4*x)
curve(f,0,3)
optimize(f, c(0,3), lower = 0, upper = 3) # Ofrece el primer minimo encontrado entre 0 y 3
optimize(f, c(0,3), lower = 2, upper = 3) # Ofrece el mín. global
optimize(f, c(0,3), lower = 0, upper = 3, maximum=T) # Ofrece el max.


#Estudiar la concavidad/convexidad
ff=mosaicCalc::D(x*sin(4*x) ~x)
ff
dff=mosaicCalc::D(ff(x)~x)
dff
curve(dff, c(-10, 10))

###
g=function(x) x*(20-2*x)*(16-2*x)
curve(g,0,10)
optimize(g, c(0,10), lower = 0, upper = 10, maximum=T)
optimize(g, c(0,10), lower = 0, upper = 10)

# Estudiar la concavidad/convexidad pag.59
gg=mosaicCalc::D(x*(20-2*x)*(16-2*x)~x)
gg
dgg=mosaicCalc::D(gg(x)~x)
curve(dgg, c(-10, 10))

hh=mosaicCalc::D(h(x) ~x)
hh
dhh=mosaicCalc::D(hh(x)~x)
dhh #>0 para todo x ---- h es convexa

g6=mosaicCalc::D(2*t ~t&t&t)
g6

