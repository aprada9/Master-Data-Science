---
title: "practica_estudio"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Cargamos los datos; el csv escogido es el comprendido entre los a?os 2007/2011
# Este dataset tiene un total de 145 variables y 42585 observaciones
```{r}

setwd("C:/Users/salva/Desktop/ignacio CUNEF/prediccion/practica02")
credit<-read.csv("LoanStats3a.csv", header=T, sep="|", dec=".", fill = T)

```
# Tomamos como variable dependiente loan_status, tal y como viene en el documento, esta variable evalua
# el estado del prestamo; vamos a estudiarla y cambiarla para poder trabajar con ella
```{r}
is.factor(credit$loan_status) # vemos si es factor o no
table(credit$loan_status) # vemos cuantas puntaciones tiene cada una de las variables,
                  #tras el estudio pasamos a convertir a cero todas las q son poco relevantes.
credit<-credit[credit$loan_status!="f",]
credit<-credit[credit$loan_status!="",]
credit<-credit[credit$loan_status!="Aug-2010",]
credit<-credit[credit$loan_status!="Dec-2010",]
credit<-credit[credit$loan_status!="Dec-2011",]
credit<-credit[credit$loan_status!="Feb-2011",]
credit<-credit[credit$loan_status!="Jul-2010",]
credit<-credit[credit$loan_status!="Mar-2011",]
credit<-credit[credit$loan_status!="May-2011",]
credit<-credit[credit$loan_status!="Nov-2011",]
credit<-credit[credit$loan_status!="Oct-2010",]
credit<-credit[credit$loan_status!="Sep-2011",]
#todas estas se han tomado porque su valor rspecto del total era minimo y nada significativo, es decir son 1 y 2.
table(credit$credit.loan_status) # eliminamos
credit$loan_status = gsub("Does not meet the credit policy. Status:Charged Off", "Charged Off",credit$loan_status)
credit$loan_status = gsub("Does not meet the credit policy. Status:Fully Paid", "Fully Paid",credit$loan_status)
#hemos eliminado does not meet.....charged off/fully paid

table(credit$loan_status)
#como podemos observar solo nos quedan fully paid y charged off
#nos creamos una nueva columna igaul q credit$loan_status
estado_prestamo <- credit$loan_status
# convertimos en una binomial la columna denominando 1 para fully paid y 0 para charged off
table(estado_prestamo)
estado_prestamo <- factor(estado_prestamo, labels=0:1)
table(estado_prestamo)
#como podemos ver se ha convertido en una binomial (0,1)
is.factor(estado_prestamo)

#Por lo tanto nuestra nueva variable dependiente sera estado_prestamos
```
# Tras la lectura del articulo "Evaluating credit risk...." decidimos utilizar las variables:
# el grado del credito, ratio deuda ingresos, FICO y que parte del credito lo emplea para pagar ese u otros creditos que tenga, que corresponden a los nombres de la tabla:
# (dti, grade, int_rate, revol_util); Tenemos un total de 4 variables;
#  creamos un nuevo df que ademas a?adiremos la variable dependiente estado_prestamo
```{r}
estudio<-data.frame(estado_prestamo, credit$dti, credit$grade, credit$int_rate, credit$revol_util, credit$annual_inc, credit$total_acc, credit$loan_amnt, credit$total_pymnt, credit$total_rec_int)

```
# Como podemos ver tenemos que volver hacer lo mismo que hicimos con loan_status con grade, primero vemos que niveles tiene, que relevancia tiene cada uno, limpiamos y por ?ltimo convertimos en factor
```{r}
table(estudio$credit.grade)  # eliminamos los cuatro niveles que tienen cero

# convertimos a factor
estudio$credit.grade <- factor(estudio$credit.grade, labels=1:7)
table(estudio$credit.grade)
```
#vamos a ver de que tipo son cada una de las diez variables que tengo
```{r}
typeof(estudio$estado_prestamo) #integer
typeof(estudio$credit.dti) #integer
typeof(estudio$credit.grade)  #integer
typeof(estudio$credit.int_rate) #integer
typeof(estudio$credit.revol_util) #integer
typeof(estudio$credit.annual_inc) #integer
typeof(estudio$credit.total_acc) #integer
typeof(estudio$credit.loan_amnt) #integer
typeof(estudio$credit.total_pymnt) #integer
typeof(estudio$credit.total_rec_int) #double
```
# Convertimos todas las variables a numerico.
# Para ello, las dos variables que aparecen como % primero le quitaremos el simbolo % para poder operar con ellas, las convertiremos a numeric y las dividiremos por 100
```{r}
#quitamos el simbolo %
estudio$credit.int_rate = gsub("%", "",estudio$credit.int_rate)
head(estudio$credit.int_rate)
estudio$credit.revol_util= gsub("%", "",estudio$credit.revol_util)
head(estudio$credit.revol_util)
#convertimos a numeric
estudio$credit.dti<-as.numeric(paste(estudio$credit.dti))
estudio$credit.int_rate<-as.numeric(paste(estudio$credit.int_rate))/100
estudio$credit.revol_util<-as.numeric(paste(estudio$credit.revol_util))/100
estudio$credit.annual_inc<-as.numeric(paste(estudio$credit.annual_inc))
estudio$credit.total_acc<-as.numeric(paste(estudio$credit.total_acc))
estudio$credit.total_pymnt<-as.numeric(paste(estudio$credit.total_pymnt))

estudio$credit.loan_amnt<-as.numeric(paste(estudio$credit.loan_amnt))
estudio$credit.total_rec_int<-as.numeric(paste(estudio$credit.total_rec_int))
estudio$estado_prestamo<-as.numeric(paste(estudio$estado_prestamo))
head(estudio)
```
# vemos un summary y eliminamos los Nas
```{r}
summary(estudio)
#el numero de Nas es muy peque?o, por lo que los eliminamos, no hace falta hacer ninguna conversion
estudio = na.omit(estudio)
summary(estudio)
sapply(estudio, class)
```
# Una vez realizado todo el trabajo de limpieza de datos y preparacion de nuestro df estudio pasamos a la realizacion del modelo de predicci?n.
```{r}
mod01=glm(estado_prestamo~credit.int_rate+credit.revol_util+credit.dti+credit.int_rate+credit.revol_util+
            credit.annual_inc+credit.total_acc+credit.total_pymnt+credit.loan_amnt+
            credit.total_rec_int+credit.grade,family="binomial",data=estudio)
summary(mod01)
```
#tomamos una muestra aleatoria y preparamos train y test
```{r}
set.seed(1234)
n=nrow(estudio)
id_train <- sample(1:n , 0.90*n)
estudio.train = estudio[id_train,]
estudio.test = estudio[-id_train,]
```
#vemos la regresi?n log?stica
```{r}
estudio.glm0<-glm(estado_prestamo~credit.int_rate+credit.dti+credit.revol_util+credit.dti+credit.grade+
                    credit.int_rate+credit.revol_util+credit.annual_inc+credit.total_pymnt+
                     credit.loan_amnt+credit.total_rec_int,family=binomial,estudio.train)
summary(estudio.glm0)
```
#construimos modelo 2 quitando las variables no significativas
```{r}
estudio.glm1<-glm(estado_prestamo~credit.grade+credit.revol_util+credit.annual_inc+
                    credit.loan_amnt+credit.total_pymnt+credit.total_rec_int,
                  family=binomial,estudio.train)
summary(estudio.glm1)

```
#comprobamos los estad?sticos AIC y BIC
```{r}
AIC(estudio.glm0)
AIC(estudio.glm1)
BIC(estudio.glm0)
BIC(estudio.glm1)
# el modelo glm0 es algo mejor que el modelo gml1
```
#representamos 
```{r}
hist(predict(estudio.glm0))
hist(predict(estudio.glm0, type = "response"))
```
#elegimos la probabilidad de corte
```{r}
table(predict(estudio.glm0,type="response") > 0.5)
table(predict(estudio.glm0,type="response") > 0.3)
table(predict(estudio.glm0,type="response") > 0.2)
#nos quedamos con 0.2
```
#predecimos dentro de la muestra
```{r}
prob.glm0.insample <- predict(estudio.glm0,type="response")
predicted.glm0.insample <- prob.glm0.insample > 0.2
predicted.glm0.insample <- as.numeric(predicted.glm0.insample)
table(estudio.train$estado_prestamo, predicted.glm0.insample, dnn=c("Truth","Predicted"))
#vemos la tasa de error
mean(ifelse(estudio.train$estado_prestamo != predicted.glm0.insample, 1, 0))
```
#predecimos fuera de la muestra
```{r}
prob.glm0.outsample <- predict(estudio.glm0,estudio.test,type="response")
predicted.glm0.outsample <-  prob.glm0.outsample> 0.2
predicted.glm0.outsample <- as.numeric(predicted.glm0.outsample)
table(estudio.test$estado_prestamo, predicted.glm0.outsample, dnn=c("Truth","Predicted"))
#vemos la tasa de error
mean(ifelse(estudio.test$estado_prestamo != predicted.glm0.outsample, 1, 0))
```

#curva ROC
```{r}
library(verification)
prob.glm0.outsample <- predict(estudio.glm0,estudio.test,type="response")
roc.plot(estudio.test$estado_prestamo == '1', prob.glm0.outsample)
#comparamos modelos
prob.glm1.outsample <- predict(estudio.glm1,estudio.test,type="response")
roc.plot(x= estudio.test$estado_prestamo == '1', pred=cbind(prob.glm1.outsample,prob.glm0.outsample), legend=TRUE)$roc.vol
#vemos que los modelos son muy parejos; los modelos predicen bastante bien, estoy conforme con el resultado, se podr?a mejorar pero est? muy cercano al ?ptimo.
```
#valor de probabilidad de corte optimo
```{r}

searchgrid = seq(0.01, 0.99, 0.01)

result = cbind(searchgrid, NA)

cost1 <- function(r, pi){
  weight1 = 10
  weight0 = 1
  c1 = (r==1)&(pi<pcut) 
  c0 = (r==0)&(pi>pcut) 
  return(mean(weight1*c1+weight0*c0))
}
estudio.glm0<-glm(estado_prestamo~credit.int_rate+credit.dti+credit.revol_util+credit.dti+credit.grade+
                    credit.int_rate+credit.revol_util+credit.annual_inc+credit.total_pymnt+
                     credit.loan_amnt+credit.total_rec_int,family=binomial,estudio.train); 
prob <- predict(estudio.glm1,type="response")
for(i in 1:length(searchgrid))
{
  pcut <- result[i,1]
 
  result[i,2] <- cost1(estudio.train$estado_prestamo, prob)
}
plot(result, ylab="Cost in Training Set")
# De la gr?fica podemos extraer que hasta 0.8 no cambia mucho, a partir de ah? nos empezaremos a equivocar mucho, por lo tanto 0.5 estar?a bien paranuestro modelo.
result[which.min(result[,2]),] # el minimo punto de corte ser?a 0.08
```

